Link List Cycle 2

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* fast=head,*slow=head;
        if(!head || !head->next)
            return NULL;
    while(fast && fast->next ){
        slow=slow->next;
        fast=fast->next->next;
        if(fast==slow)
        break;
    }
    
    if(!fast)
        return NULL;
        ListNode *temp=NULL;
    if(slow==fast){
cout<<slow->val;temp=head;
        
    while(temp!=slow){
        
        temp=temp->next;slow=slow->next;
    }
    return temp;}
    return temp;
    
        
    }
};