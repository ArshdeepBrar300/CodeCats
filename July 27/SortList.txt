Sort List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* merge(ListNode* l1,ListNode* l2){
        ListNode* t=new ListNode(0);
        ListNode* curr=t;
        while(l1 != NULL && l2 != NULL)
        {
            if(l1->val <= l2->val)
            {
                curr -> next = l1;
                l1 = l1 -> next;
            }
            else
            {
                curr -> next = l2;
                l2 = l2 -> next;
            }
        
        curr = curr ->next;
        
        }
        
        while(l1!=NULL){;
       
            curr->next=l1;
            l1=l1->next;
            curr = curr ->next;

        }
         while(l2!=NULL){;
            curr->next=l2;
            l2=l2->next;
            curr = curr ->next;

        }
        return t->next;
    }
    ListNode* sortList(ListNode* head) {

        if(!head || !head->next) return head;

        
        ListNode *temp = NULL;
        ListNode *slow = head;
        ListNode *fast = head;

        while(fast !=  NULL && fast -> next != NULL)
        {
            temp = slow;
            slow = slow->next;          //slow increment by 1
            fast = fast ->next ->next;  //fast incremented by 2
            
        }   
        temp -> next = NULL; 
         ListNode* l1 = sortList(head);    //left half recursive call
        ListNode* l2 = sortList(slow);
        
        return merge(l1,l2);



        
    }
};