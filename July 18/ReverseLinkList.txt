Revere Link List

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode *cur;
    void rev(ListNode *prev,ListNode* head){

        if(head!=NULL){
            rev(head,head->next);
            head->next=prev;

        }
        else{
            cur=prev;
        }

    }
    ListNode* reverseList(ListNode* head) {
       ListNode *prev=NULL;ListNode *nxt=NULL;
       cur=head;
        rev(NULL,head);
        return cur;
       
    //    if(head==NULL || head->next==NULL)
    //     return head;
    //    while(head){
    //        nxt=head->next;
    //        head->next=prev;
    //        prev=head;
    //        head=nxt;
           
    //    }
    //    return prev;
        
        }


        
    
};